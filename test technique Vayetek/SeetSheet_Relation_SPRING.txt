Bien sûr, voici un résumé simplifié des différentes relations entre les entités que vous avez décrites :

1. **Formation 1 ----> 1 Detail_formation :**
   - `Formation` a une relation **@OneToOne** avec `Detail_formation`.
   - Aucune annotation spécifique n'est nécessaire dans `Detail_formation`.

2. **Formation 1 ---> * Detail_formation :**
   - `Formation` a une relation **@OneToMany** avec une liste de `Detail_formation`.
   - Aucune annotation spécifique n'est nécessaire dans `Detail_formation`.

3. **Formation * ---> 1 Detail_formation :**
   - `Formation` a une relation **@ManyToOne** avec `Detail_formation`.
   - Aucune annotation spécifique n'est nécessaire dans `Detail_formation`.

4. **Formation * ---> * Detail_formation :**
   - `Formation` a une relation **@ManyToMany** avec une liste de `Detail_formation`.
   - Aucune annotation spécifique n'est nécessaire dans `Detail_formation`.

5. **Departement * ---- 1 Entreprise :**
   - `Departement` a une relation **@ManyToOne** avec `Entreprise`.
   - `Entreprise` a une liste de `Departement` annotée avec **@OneToMany**.

6. **Departement * ---- * Employe :**
   - `Departement` a une liste d'`Employe` annotée avec **@ManyToMany** (Inverse side).
   - `Employe` a une liste de `Departement` annotée avec **@ManyToMany** et **mappedBy**.

7. **Departement 1 ---- * Mission :**
   - `Departement` a une liste de `Mission` annotée avec **@OneToMany** et **mappedBy**.
   - `Mission` a une relation **@ManyToOne** avec `Departement`.

8. **Employe 1 --- 1 Contrat :**
   - `Employe` a une relation **@OneToOne** avec `Contrat`.
   - `Contrat` a une relation **@OneToOne** avec `Employe` et est **mappedBy** l'attribut "employe".

Remarque : J'ai ajouté **@JsonIgnore** dans certaines annotations pour indiquer que la propriété devrait être ignorée lors de la sérialisation/désérialisation 


******************************************************************************************
***************************************************************************************************




Formation 1 ----> 1 Detail_formation 
**********************************
Formation   @OneToOne
	    private Detail_formation detail_f;
**********************************************
Detail_formation : on ne met rien 
**********************************************




Formation 1 ---> * Detail_formation 
***********************************
Formation   @OneToMany(cascade= CascadeType.ALL)
	    private List<Detail_formation> detail_f;
*****************************************************
Detail_Formation : Rien
***************************************************


Formation * ---> 1 Detail_fomation 
********************************************************
Fomation    @ManyToOne	
	    Datail_Formation detail_f;
**************************************************
Detail_formation : RIEN 




Formation * ---> * Detail_formation
*************************************************
Fomation 	@ManyToMany ( cascade = cascadeType.all)
		private List<Detail_formation> detail_f
******************************************************
Detail_formation 	RIEN	 

Departement * ---- 1 Entreprise    ( sans flech)       
**************************************************************
Departement	@ManyToOne
		private Entreprise entreprise;
*****************************************************************************
Entreprise      @OneToMany(mappedBy="entreprise")
		private List<Departement>departements = new ArrayList<>();
*****************************************************************************




Departement * ---- * Employe
**************************************************************************
DEPARTEMENT	
@JsonIgnore
@ManyToMany
		private Set<Employe> employes;
***************************************************************************
EMPLOYE	
	@ManyToMany(mappedBy="employes",fetch=FetchType.EAGER )
		private Set<Departement> departements;
***************************************************************************



Departement 1 ---- * Mission
**************************************************
DEPARTEMENT	
@JsonIgnore
@OneToMany(mappedBy="departement")
		private List<Mission> missions;
**************************************************
MISSION
		@ManyToOne
		private Departement departement;
*************************************************




Employe 1 --- 1 Contrat 
********************************************
Employe 	
@JsonIgnore
@OneToOne(mappedBy="employe")
	        private Contrat contrat;
********************************************
Contrat 	@OneToOne
		private Employe employe;











&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
fi cas ManyToMany bidirect *-----*
na5taro li nhbo alih  ywali fils w nhotola mappedBy w le5er laaa 


kif kif fi onetoone 1--------1   
li fih mapped by howe l fils 

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
fi onetomany manytoone 
myhmed chkoun fils lmohem el mappedBy fi jihet li fih el  One 


ki yabde fi cas fama Many fi relation fi chiraa dimeee fame Set<*>**s


&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
cascade=cascade.all 
nstamlouha ki fama entité marboutaaa b entitéé okhra ki nasna3 piste nasne3 skieur maha








---------------------------------------------

onetomany 

@ManyToOne
fi chiret el * :  ---> nhoto juste les private entitynameofmany   khaw  




@onetomany (mappedBy=    ,fetch=FetchType.EAGER , cascade = cascadeType.ALL)
fi chiret el  many * : --->  nhoto fiha liste set  w mapped by 



ki tebde MANY fi le5er
ManyToMany
onetomany  
nzido (fetch=FetchType.EAGER , cascade = cascadeType.ALL)






http://localhost:8089/examen2024/swagger-ui/
http://localhost:8089/examen2024/swagger-ui/index.html#/



public interface e1Repository  extends JpaRepository<e1 , Long> {
 LOng : type mt3 kle primaire de  lentité  e1